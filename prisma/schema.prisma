// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String    @unique
  password     String
  profileImage String?
  createdAt    DateTime  @default(now()) @map("createdAt") @db.Date
  session      Session[]
  profile      Profile?
  Post         Post[]
  votes        Votes[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  valid     Boolean  @default(true)
  userAgent String
  createdAt DateTime @default(now())
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  website     String?
  gender      String?
  dateOfBirth DateTime?
  address     String?
  user        User      @relation(references: [id], fields: [userId])
  userId      String    @unique @db.ObjectId
  createdAt   DateTime  @default(now())
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  user        User          @relation(references: [id], fields: [userId])
  userId      String        @db.ObjectId
  shares      Int           @default(0)
  votes       Votes[]
  createdAt   DateTime      @default(now())
  comments    Comments[]
  Attachments Attachments[]
}

model Votes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(references: [id], fields: [postId])
  postId    String   @db.ObjectId
  vote      Int      @default(0)
  user      User     @relation(references: [id], fields: [userId])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Comments {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  post        Post          @relation(references: [id], fields: [postId])
  postId      String        @db.ObjectId
  parentId    String?       @db.ObjectId
  parent      Comments?     @relation("postSubComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child       Comments[]    @relation("postSubComment")
  Attachments Attachments[]
}

model Attachments {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  path       String
  post       Post?     @relation(references: [id], fields: [postId])
  postId     String    @db.ObjectId
  comment    Comments? @relation(references: [id], fields: [commentsId])
  commentsId String?   @db.ObjectId
}
